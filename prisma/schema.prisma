generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model case_management {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serial_number       String
  diary_number        String
  case_number         String?
  parties             String?
  advocates           String?
  bench               String?
  judgment_by         String?
  judgment_date       String?
  court               String
  date                DateTime              @default(now())
  created_at          DateTime              @default(now())
  updated_at          DateTime
  judgment_url        String[]
  file_path           String?               @default("")
  judgment_text       String[]
  case_type           String?               @default("")
  city                String?               @default("")
  district            String?               @default("")
  judgment_type       String?               @default("")
  extracted_judgments extracted_judgments[]
}

model client {
  name         String
  organization String
  email        String   @unique
  phone_no     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user_id      String   @db.Uuid
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users        users    @relation(fields: [user_id], references: [id])
}

model extracted_judgments {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  case_id         String          @db.Uuid
  judgment_url    String
  extractedText   String?
  language        String?
  is_synced       Boolean         @default(false)
  created_at      DateTime        @default(now())
  updated_at      DateTime
  summary         String?         @default("")
  case_management case_management @relation(fields: [case_id], references: [id])

  @@unique([case_id, judgment_url])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model file_reviews {
  id                                     String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_id                                String            @db.Uuid
  reviewer_id                            String            @db.Uuid
  requester_id                           String            @db.Uuid
  organization_id                        String            @db.Uuid
  status                                 FileReviewStatus  @default(PENDING)
  due_date                               DateTime?
  created_at                             DateTime          @default(now())
  updated_at                             DateTime
  file_system_nodes                      file_system_nodes @relation(fields: [file_id], references: [id])
  organizations                          organizations     @relation(fields: [organization_id], references: [id])
  users_file_reviews_requester_idTousers users             @relation("file_reviews_requester_idTousers", fields: [requester_id], references: [id])
  users_file_reviews_reviewer_idTousers  users             @relation("file_reviews_reviewer_idTousers", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review_comments                        review_comments[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model file_system_nodes {
  id                                        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                      String
  type                                      FileType
  content                                   String?
  parent_id                                 String?             @db.Uuid
  is_expanded                               Boolean             @default(false)
  created_at                                DateTime            @default(now())
  updated_at                                DateTime
  created_by                                String?             @db.Uuid
  updated_by                                String?             @db.Uuid
  user_id                                   String?             @db.Uuid
  is_default                                Boolean             @default(false)
  file_reviews                              file_reviews[]
  users_file_system_nodes_created_byTousers users?              @relation("file_system_nodes_created_byTousers", fields: [created_by], references: [id])
  file_system_nodes                         file_system_nodes?  @relation("file_system_nodesTofile_system_nodes", fields: [parent_id], references: [id])
  other_file_system_nodes                   file_system_nodes[] @relation("file_system_nodesTofile_system_nodes")
  users_file_system_nodes_updated_byTousers users?              @relation("file_system_nodes_updated_byTousers", fields: [updated_by], references: [id])
  users_file_system_nodes_user_idTousers    users?              @relation("file_system_nodes_user_idTousers", fields: [user_id], references: [id])

  @@index([created_by])
  @@index([parent_id])
  @@index([updated_by])
  @@index([user_id])
}

model individual_otp_logins {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mobile_number String    @unique
  otp           String?
  otp_expiry    DateTime?
  attempts      Int       @default(0)
  user_id       String    @unique @db.Uuid
  status        OtpStatus @default(PENDING)
  created_at    DateTime  @default(now())
  updated_at    DateTime
  users         users     @relation(fields: [user_id], references: [id])
}

model invitations {
  email           String
  token           String?          @unique
  expires_at      DateTime?
  organization_id String           @db.Uuid
  status          InvitationStatus @default(PENDING)
  created_at      DateTime         @default(now())
  updated_at      DateTime
  role_id         String           @db.Uuid
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizations   organizations    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  roles           roles            @relation(fields: [role_id], references: [id])
}

model notifications {
  id           String   @id(map: "Notifications_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  dairy_number String?
  user_id      String?  @db.Uuid
  method       String?
  contact      String?
  message      String?
  status       String?  @default("'pending'::text")
  users        users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model org_memberships {
  user_id         String        @db.Uuid
  organization_id String        @db.Uuid
  created_at      DateTime      @default(now())
  updated_at      DateTime
  role_id         String        @db.Uuid
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizations   organizations @relation(fields: [organization_id], references: [id])
  users           users         @relation(fields: [user_id], references: [id])

  @@unique([user_id, organization_id])
}

model organizations {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  plan            Plan              @default(FREE)
  is_verified     Boolean           @default(false)
  created_at      DateTime          @default(now())
  updated_at      DateTime
  created_by      String?           @db.Uuid
  file_reviews    file_reviews[]
  invitations     invitations[]
  org_memberships org_memberships[]
  users           users?            @relation(fields: [created_by], references: [id])
}

model permissions {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       PermissionName
  created_at DateTime       @default(now())
  updated_at DateTime
  role_id    String?        @db.Uuid
  roles      roles?         @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, name])
}

model review_comments {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  review_id    String       @db.Uuid
  user_id      String       @db.Uuid
  content      String
  created_at   DateTime     @default(now())
  updated_at   DateTime
  resolved     Boolean      @default(false)
  file_reviews file_reviews @relation(fields: [review_id], references: [id])
  users        users        @relation(fields: [user_id], references: [id])
}

model roles {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        RoleName      @unique
  description String?
  created_at  DateTime      @default(now())
  updated_at  DateTime
  invitations invitations[]
  permissions permissions[]
}

model user_cases {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime @default(now())
  updated_at   DateTime
  status       String   @default("PENDING")
  user_id      String   @db.Uuid
  diary_number String
  case_type    String?  @default("")
  city         String?  @default("")
  court        String   @default("")
  district     String?  @default("")
  users        users    @relation(fields: [user_id], references: [id])
}

model users {
  id                                                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                  String?
  email                                                 String                 @unique
  password                                              String?
  is_verified                                           Boolean?               @default(false)
  created_at                                            DateTime?              @default(now())
  updated_at                                            DateTime?
  verification_token                                    String?                @unique
  verification_token_expiry                             DateTime?
  country_code                                          String                 @default("+91")
  mobile_number                                         String                 @default("0000000000")
  is_mobile_verified                                    Boolean?               @default(false)
  mobile_otp_attempts                                   Int?                   @default(0)
  mobile_otp_expiry                                     DateTime?
  otp                                                   String?
  client                                                client[]
  file_reviews_file_reviews_requester_idTousers         file_reviews[]         @relation("file_reviews_requester_idTousers")
  file_reviews_file_reviews_reviewer_idTousers          file_reviews[]         @relation("file_reviews_reviewer_idTousers")
  file_system_nodes_file_system_nodes_created_byTousers file_system_nodes[]    @relation("file_system_nodes_created_byTousers")
  file_system_nodes_file_system_nodes_updated_byTousers file_system_nodes[]    @relation("file_system_nodes_updated_byTousers")
  file_system_nodes_file_system_nodes_user_idTousers    file_system_nodes[]    @relation("file_system_nodes_user_idTousers")
  individual_otp_logins                                 individual_otp_logins?
  notifications                                         notifications[]
  org_memberships                                       org_memberships[]
  organizations                                         organizations[]
  review_comments                                       review_comments[]
  user_cases                                            user_cases[]
}

model WebsiteFeedback {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String?  @unique @db.VarChar(255)
  rating      Int      @default(1)
  suggestion  String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  ipAddress   String?  @db.VarChar(45)
  fingerprint String?  @unique
  deviceId    String?  @db.VarChar(255)

  @@index([ipAddress])
  @@index([createdAt])
  @@index([rating])
  @@map("website_feedback")
}

model ApiAnalytics {
  id        Int      @id @default(autoincrement())
  route     String
  date      DateTime
  count     Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([route, date])
  @@map("api_analytics")
}

enum FileReviewStatus {
  PENDING
  IN_REVIEW
  COMPLETED
  DECLINED
}

enum FileType {
  FILE
  FOLDER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  ACTIVE
}

enum OtpStatus {
  PENDING
  VERIFIED
  EXPIRED
}

enum PermissionName {
  READ
  WRITE
  DELETE
  SHARE
  UPLOAD
  DOWNLOAD
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum RoleName {
  ADMIN
  SUPERVISOR
  ASSISTANT
}
